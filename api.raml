#%RAML 0.8
title: ID Broker API
protocols: [ HTTPS ]
mediaType: application/json
securitySchemes:
  - AuthzBearerToken:
      type: x-{other}
      describedBy:
        headers:
          Authorization:
            type: string
            example: Bearer abc123
securedBy: [ AuthzBearerToken ]

schemas:
  - Authentication: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "properties": {
          "username": {
            "required": true,
            "type": "string"
          },
          "password": {
            "required": true,
            "type": "string"
          }
        },
        "type": "object"
      }
  - Error: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "properties": {
          "name": {
            "required": true,
            "type": "string"
          },
          "message": {
            "required": true,
            "type": "string"
          },
          "code": {
            "required": true,
            "type": "integer"
          },
          "status": {
            "required": true,
            "type": "integer"
          }
        },
        "type": "object"
      }
  - ReturnedUser: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "properties": {
          "uuid": {
            "required": false,
            "type": "string"
          },
          "employee_id": {
            "required": false,
            "type": "string"
          },
          "first_name": {
            "required": false,
            "type": "string"
          },
          "last_name": {
            "required": false,
            "type": "string"
          },
          "display_name": {
            "required": false,
            "type": "string"
          },
          "username": {
            "required": false,
            "type": "string"
          },
          "email": {
            "required": false,
            "type": "string"
          },
          "active": {
            "required": false,
            "type": "string",
            "enum": ["yes", "no"]
          },
          "locked": {
            "required": false,
            "type": "string",
            "enum": ["yes", "no"]
          },
          "password": {
            "required": false,
            "type": "object",
            "properties": {
              "created_utc": {
                "required": true,
                "type": "string"
              },
              "expires_on": {
                "required": true,
                "type": "string"
              },
              "grace_period_ends_on": {
                "required": true,
                "type": "string"
              }
            }
          }
        },
        "type": "object"
      }
  - UserCreation: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "properties": {
          "employee_id": {
            "required": true,
            "type": "string"
          },
          "first_name": {
            "required": true,
            "type": "string"
          },
          "last_name": {
            "required": true,
            "type": "string"
          },
          "display_name": {
            "required": false,
            "type": "string"
          },
          "username": {
            "required": true,
            "type": "string"
          },
          "email": {
            "required": true,
            "type": "string"
          },
          "active": {
            "required": false,
            "type": "string",
            "enum": ["yes", "no"]
          },
          "locked": {
            "required": false,
            "type": "string",
            "enum": ["yes", "no"]
          }
        },
        "type": "object"
      }
  - UserList: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "items": {
          "properties": {
            "uuid": {
              "required": false,
              "type": "string"
            },
            "employee_id": {
              "required": false,
              "type": "string"
            },
            "first_name": {
              "required": false,
              "type": "string"
            },
            "last_name": {
              "required": false,
              "type": "string"
            },
            "display_name": {
              "required": false,
              "type": "string"
            },
            "username": {
              "required": false,
              "type": "string"
            },
            "email": {
              "required": false,
              "type": "string"
            },
            "active": {
              "required": false,
              "type": "string",
              "enum": ["yes", "no"]
            },
            "locked": {
              "required": false,
              "type": "string",
              "enum": ["yes", "no"]
            },
            "password": {
              "required": false,
              "type": "object",
              "properties": {
                "created_utc": {
                  "required": true,
                  "type": "string"
                },
                "expires_on": {
                  "required": true,
                  "type": "string"
                },
                "grace_period_ends_on": {
                  "required": true,
                  "type": "string"
                }
              }
            }
          },
          "type": "object"
        },
        "type": "array"
      }
  - UserUpdate: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "properties": {
          "first_name": {
            "required": false,
            "type": "string"
          },
          "last_name": {
            "required": false,
            "type": "string"
          },
          "display_name": {
            "required": false,
            "type": "string"
          },
          "username": {
            "required": false,
            "type": "string"
          },
          "email": {
            "required": false,
            "type": "string"
          },
          "active": {
            "required": false,
            "type": "string",
            "enum": ["yes", "no"]
          },
          "locked": {
            "required": false,
            "type": "string",
            "enum": ["yes", "no"]
          }
        },
        "type": "object"
      }

/authentication:
  post:
    body:
      application/json:
        schema: Authentication
        example: |
          {
            "username": "john_smith",
            "password": "correcthorsebatterystaple"
          }
    responses:
      200:
        description: |
          The given credentials were acceptable/valid (i.e. - the
          authentication succeeded). The body of the response will have the
          attributes of the authenticated User.
        body:
          application/json:
            schema: ReturnedUser
            example: |
              {
                "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                "employee_id": "12345",
                "first_name": "John",
                "last_name": "Smith",
                "display_name": "John Smith",
                "username": "john_smith",
                "email": "john_smith@example.com",
                "active": "yes",
                "locked": "no",
                "password": {
                  "created_utc":"2017-05-24 14:04:51 UTC",
                  "expires_on":"2018-05-24 23:59:59 UTC",
                  "grace_period_ends_on":"2018-06-23 23:59:59 UTC"
                }
              }
      400:
        description: |
          The given credentials were NOT acceptable/valid (i.e. - the
          authentication failed).
        body:
          application/json:
            schema: Error
            example: |
              {
                "name": "Bad Request",
                "message": "",
                "code": 0,
                "status": 400
              }
      500:
        description: A server-side error occurred.
        body:
          application/json:
            schema: Error
            example: |
              {
                "name": "Internal Server Error",
                "message": "Some error message.",
                "code": 0,
                "status": 500
              }

/user:
  get:
    description: Get a list of the existing users.
    queryParameters:
      fields:
        description: A comma-delimited list of fields to include for each user.
        required: false
        type: string
        default: "fields=uuid,employee_id,first_name,last_name,display_name,username,email,active,locked,password"
        example: "fields=employee_id,active"
    responses:
      200:
          body:
            application/json:
              schema: UserList
              example: |
                [
                  {
                    "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                    "employee_id": "12345",
                    "first_name": "John",
                    "last_name": "Smith",
                    "display_name": "John Smith",
                    "username": "john_smith",
                    "email": "john_smith@example.com",
                    "active": "yes",
                    "locked": "no",
                    "password": {
                      "created_utc":"2017-05-24 14:04:51",
                      "expires_on":"2018-05-24",
                      "grace_period_ends_on":"2018-06-23"
                    }
                  },
                  {
                    "uuid": "22222222-bbbb-2222-bbbb-222222222222",
                    "employee_id": "54321",
                    "first_name": "Jane",
                    "last_name": "Smith",
                    "display_name": "Jane Smith",
                    "username": "jane_smith",
                    "email": "jane_smith@example.com",
                    "active": "yes",
                    "locked": "no"
                  }
                ]
  post:
    description: Create a new user record.
    body:
      application/json:
        schema: UserCreation
        example: |
          {
            "employee_id": "12345",
            "first_name": "John",
            "last_name": "Smith",
            "username": "john_smith",
            "email": "john_smith@example.com"
          }
    responses:
      200:
        description: The new user record was created.
        body:
          application/json:
            schema: ReturnedUser
            example: |
              {
                "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                "employee_id": "12345",
                "first_name": "John",
                "last_name": "Smith",
                "display_name": "John Smith",
                "username": "john_smith",
                "email": "john_smith@example.com",
                "active": "yes",
                "locked": "no"
              }
      422:
        description: The given user data does not satisfy some validation rule.
        body:
          application/json:
            schema: Error
            example: |
              {
                "name": "Unprocessable entity",
                "message": "Employee ID cannot be blank.",
                "code": 0,
                "status": 422
              }
      500:
        description: A server-side error occurred.
        body:
          application/json:
            schema: Error
            example: |
              {
                "name": "Internal Server Error",
                "message": "Some error message.",
                "code": 0,
                "status": 500
              }

  /{employee_id}:
    get:
      description: Get information about a specific user.
      responses:
        200:
          description: |
            The corresponding user record (matching on the `employee_id` URL
            parameter).
          body:
            application/json:
              schema: ReturnedUser
              example: |
                {
                  "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                  "employee_id": "12345",
                  "first_name": "John",
                  "last_name": "Smith",
                  "display_name": "John Smith",
                  "username": "john_smith",
                  "email": "john_smith@example.com",
                  "active": "yes",
                  "locked": "no",
                  "password": {
                    "created_utc":"2017-05-24 14:04:51 UTC",
                    "expires_on":"2018-05-24 23:59:59 UTC",
                    "grace_period_ends_on":"2018-06-23 23:59:59 UTC"
                  }
                }
        204:
          description: No user record was found with that `employee_id`.
    put:
      description: Update a user record.
      body:
        application/json:
          schema: UserUpdate
          example: |
            {
              "active": "no"
            }
      responses:
        200:
          description: |
            The corresponding user record (matching on the `employee_id` URL
            parameter) was updated to match the given data.
          body:
            application/json:
              schema: ReturnedUser
              example: |
                {
                  "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                  "employee_id": "12345",
                  "first_name": "John",
                  "last_name": "Smith",
                  "display_name": "John Smith",
                  "username": "john_smith",
                  "email": "john_smith@example.com",
                  "active": "no",
                  "locked": "no",
                  "password": {
                    "created_utc":"2017-05-24 14:04:51 UTC",
                    "expires_on":"2018-05-24 23:59:59 UTC",
                    "grace_period_ends_on":"2018-06-23 23:59:59 UTC"
                  }
                }
        204:
          description: No user record was found with that `employee_id`.
        422:
          description: The given user data does not satisfy some validation rule.
          body:
            application/json:
              schema: Error
              example: |
                {
                  "name": "Unprocessable entity",
                  "message": "Employee ID cannot be blank.",
                  "code": 0,
                  "status": 422
                }
        500:
          description: A server-side error occurred.
          body:
            application/json:
              schema: Error
              example: |
                {
                  "name": "Internal Server Error",
                  "message": "Some error message.",
                  "code": 0,
                  "status": 500
                }

    /password:
      put:
        description: Set the password for a User.
        body:
          application/json:
            schema:  |
              {
                "$schema": "http://json-schema.org/draft-03/schema",
                "properties": {
                  "password": {
                    "required": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            example: |
              {
                "password": "correcthorsebatterystaple"
              }
        responses:
          200:
            description: |
              The password for the user with that `employee_id` was successfully updated.
            body:
              application/json:
                schema: ReturnedUser
                example: |
                  {
                    "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                    "employee_id": "12345",
                    "first_name": "John",
                    "last_name": "Smith",
                    "display_name": "John Smith",
                    "username": "john_smith",
                    "email": "john_smith@example.com",
                    "active": "yes",
                    "locked": "no",
                    "password": {
                      "created_utc":"2017-05-24 14:04:51 UTC",
                      "expires_on":"2018-05-24 23:59:59 UTC",
                      "grace_period_ends_on":"2018-06-23 23:59:59 UTC"
                    }
                  }
          204:
            description: No user record was found with that `employee_id`.
          422:
            description: |
              The given password does not meet some requirement (such as if an
              empty string was given or a recent password was reused).
            body:
              application/json:
                schema: Error
                example: |
                  {
                    "name": "Unprocessable Entity",
                    "message": "Some error message.",
                    "code": 0,
                    "status": 422
                  }
          500:
            description: A server-side error occurred.
            body:
              application/json:
                schema: Error
                example: |
                  {
                    "name": "Internal Server Error",
                    "message": "Some error message.",
                    "code": 0,
                    "status": 500
                  }
  /expiring:
    get:
      description: Get a list of the active users whose password is expiring on a given date.
      queryParameters:
        grace_period_ends_on:
          required: false
          type: string
          example: "grace_period_ends_on=2017-06-14"
        expires_on:
          required: false
          type: string
          example: "expires_on=2017-06-14"
      responses:
        200:
            body:
              application/json:
                schema: UserList
                example: |
                  [
                    {
                      "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                      "employee_id": "12345",
                      "first_name": "John",
                      "last_name": "Smith",
                      "display_name": "John Smith",
                      "username": "john_smith",
                      "email": "john_smith@example.com",
                      "active": "yes",
                      "locked": "no",
                      "password": {
                        "created_utc":"2017-05-24 14:04:51 UTC",
                        "expires_on":"2017-05-44 23:59:59 UTC",
                        "grace_period_ends_on":"2017-06-14 23:59:59 UTC"
                      }
                    }
                  ]
  /first-password:
    get:
      description: Get a list of the active users whose first password was created on a given date.
      queryParameters:
        created_on:
          required: false
          type: string
          default: "created_on=<today's date>"
          example: "created_on=2017-06-14"
      responses:
        200:
            body:
              application/json:
                schema: UserList
                example: |
                  [
                    {
                      "uuid": "11111111-aaaa-1111-aaaa-111111111111",
                      "employee_id": "12345",
                      "first_name": "John",
                      "last_name": "Smith",
                      "display_name": "John Smith",
                      "username": "john_smith",
                      "email": "john_smith@example.com",
                      "active": "yes",
                      "locked": "no",
                      "password": {
                        "created_utc":"2017-06-14 14:04:51 UTC",
                        "expires_on":"2018-05-44 23:59:59 UTC",
                        "grace_period_ends_on":"2018-06-14 23:59:59 UTC"
                      }
                    }
                  ]
# TODO: need docs for new search api, i.e., /user?username=AAA&email=AAA@example.org
